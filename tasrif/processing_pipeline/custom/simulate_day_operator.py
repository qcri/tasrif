"""
Operator to shorten a dataframe that has a date column per row per participant.
"""

import numpy as np

from tasrif.processing_pipeline import ProcessingOperator


class SimulateDayOperator(ProcessingOperator):
    """
    Sample activity of a participant given the participant's activiy mean and standard deviation.
    This operator is usually used after AggregateOperator.

    """
    def __init__(  # pylint: disable=R0913
            self,
            date_feature_name,
            participant_identifier,
            distribution_parameter_columns,
            distribution_type='normal',
            samples=1,
            sample_column_name="sample"):
        """Creates a new instance of SimulateDayOperator

        Args:
            date_feature_name : str
                Name of the feature to identify related timestamp series
            participant_identifier : str or list of str
                Name of the feature(s) identifying the participant
            distribution_parameter_columns : list of str
                list of columns in data_frame that represent the input
                to `distribution_type`. For example, `if distribution_type='normal'`,
                then `distribution_parameter_columns` should provide the mean and standard deviation
                columns as `['mu', 'std']`.
            distribution_type : str
                Defaults to Guassian normal distribution. More distributions
                can be picked from 'here <https://numpy.org/doc/stable/reference/random/generator.html>'_
            samples : int
                Number of samples to generate from the distribution of each datapoint
                in `data_feature_name`. Suppose that date_feature_name had the times representing
                mean and standard deviation of every 15-minute in a day per participant.
                This means that we have 1440 data points per participant since
                there are 1440 15-minutes in a day. If we set samples=3, then
                the operator will generate 3*1440 data points.
            sample_column_name : str
                Name of the sample column generated by this operator
        """
        super().__init__()
        self.date_feature_name = date_feature_name
        self.participant_identifier = participant_identifier
        self.distribution_parameter_columns = distribution_parameter_columns
        self.distribution_type = distribution_type
        self.samples = samples
        self.sample_column_name = sample_column_name

    def _process(self, *data_frames):
        """Processes the passed data frame as per the configuration define in the constructor.

        Args:
            *data_frames (list of pd.DataFrame):
              Variable number of pandas dataframes to be processed

        Returns:
            pd.DataFrame -or- list[pd.DataFrame]
                Processed dataframe(s) resulting from applying the operator
        """

        processed = []
        for data_frame in data_frames:
            data_frame[self.sample_column_name] = data_frame.groupby(
                self.participant_identifier,
                self.date_feature_name).apply(self._sample_from_distribution)

            data_frame = data_frame.explode(self.sample_column_name)
            # samples = samples.reset_index(level=self.participant_identifier)
            # samples = samples.reset_index(drop=True)
            processed.append(data_frame)

        return processed

    def _sample_from_distribution(self, datapoint):
        """
        given the mean and std of a datapoint
        """
        distribution_parameters = datapoint[
            self.distribution_parameter_columns]
        samples = getattr(
            np.random.Generator,
            self.distribution_type)(*distribution_parameters.values)
        return samples
